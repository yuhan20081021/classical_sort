# 插入排序（insertjon Sort）
# 插入排序（insertjon-Sort）的算法描述是一种简单直观的排序算法。
# 它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。
# 算法描述
# 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：
#  1.从第一个元素开始，该元素可以认为已经被排序；
#  2.取出下一个元素，在已经排序的元素序列中从后向前扫描；
#  3.如果该元素（已排序）大于新元素，将该元素移到下一位置；
#  4.重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；
#  5.将新元素插入到该位置后；
#  6.重复步骤2~5。
# e.g.
#   arr = [9,10,2,8,5]
#
def insert_sort!(arr)
  (0...arr.length).to_a.each do |i|
    puts "i: #{i} -> #{arr[i]}"
    key = arr[i]
    puts "key:#{key}"
    j = i - 1;
    puts "j: j, 对应值#{arr[j]}"
    while j >= 0 and arr[j] > key
      arr[j+1] = arr[j]
      j = j-1
    end
    arr[j+1] = key
    puts "j:#{arr[j]}, #{arr}"
  end
  arr
end

# 执行过程：
# i: 0 -> 9
# key:9
# j: j, 对应值5
# j:5, [9, 10, 2, 8, 5]
# i: 1 -> 10
# key:10
# j: j, 对应值9
# j:9, [9, 10, 2, 8, 5]
# i: 2 -> 2
# key:2
# j: j, 对应值10
# j:5, [2, 9, 10, 8, 5]
# i: 3 -> 8
# key:8
# j: j, 对应值10
# j:2, [2, 8, 9, 10, 5]
# i: 4 -> 5
# key:5
# j: j, 对应值10
# j:2, [2, 5, 8, 9, 10]

# 算法分析
# 插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），
# 因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
# 

# 排序算法  时间复杂度(平均)  时间复杂度(最坏)  时间复杂度(最好)  空间复杂度  稳定性
# 选择排序     O(n2)           O(n2)             O(n)         O(1)      稳定

# 概念：
#   稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。
#   不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。
#   时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。
#   空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。 
