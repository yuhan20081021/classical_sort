# 希尔排序（Shell Sort）
# 1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。
# 它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。
#
# 算法描述
# 先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：
#  1.选择一个增量序列t1，t2，…，tk，其中ti>tj，tk=1；
#  2.按增量序列个数k，对序列进行k 趟排序；
#  3.每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，
#    分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。
# e.g.
#   arr = [9,10,2,8,5]
#
def shell_sort(arr)
  gap = arr.size

  while gap > 1
    gap = Integer(gap/2) # 动态定义间隔序列
    (gap..arr.size-1).to_a.each do |i|
      puts "i: #{i} -> #{arr[i]}"
      j = i
      while j > 0
        if arr[j] <= arr[j-gap]
          puts "j: #{j} -> #{arr[j]}"
          puts "j-gap: #{j-gap} -> #{arr[j-gap]}"
          arr[j], arr[j-gap] = arr[j-gap], arr[j]
        end
        puts " 执行j=j-gap"
        j -= gap
      end
      puts "#{arr}"
    end
  end
  array
end

# 执行过程：
# i: 2 -> 2
# j: 2 -> 2
# j-gap: 0 -> 9
#  执行j=j-gap
# [2, 10, 9, 8, 5]
# i: 3 -> 8
# j: 3 -> 8
# j-gap: 1 -> 10
#  执行j=j-gap
#  执行j=j-gap
# [2, 8, 9, 10, 5]
# i: 4 -> 5
# j: 4 -> 5
# j-gap: 2 -> 9
#  执行j=j-gap
#  执行j=j-gap
# [2, 8, 5, 10, 9]
# i: 1 -> 8
#  执行j=j-gap
# [2, 8, 5, 10, 9]
# i: 2 -> 5
# j: 2 -> 5
# j-gap: 1 -> 8
#  执行j=j-gap
#  执行j=j-gap
# [2, 5, 8, 10, 9]
# i: 3 -> 10
#  执行j=j-gap
#  执行j=j-gap
#  执行j=j-gap
# [2, 5, 8, 10, 9]
# i: 4 -> 9
# j: 4 -> 9
# j-gap: 3 -> 10
#  执行j=j-gap
#  执行j=j-gap
#  执行j=j-gap
#  执行j=j-gap
# [2, 5, 8, 9, 10]


# 算法分析
# 希尔排序的核心在于间隔序列的设定。
# 既可以提前设定好间隔序列，也可以动态的定义间隔序列。
# 动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。
# 

# 排序算法  时间复杂度(平均)  时间复杂度(最坏)  时间复杂度(最好)  空间复杂度  稳定性
# 选择排序     O(n1.3)           O(n2)             O(n2)         O(1)     不稳定

# 概念：
#   稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。
#   不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。
#   时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。
#   空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。 
